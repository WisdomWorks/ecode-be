import java.lang.reflect.Method;
import java.lang.*;
import java.util.*;
public class Main {
    public static Object callMethod(
            String className, String methodName,
            String[] parameterTypes, Object... args) {
        try {
            Class<?> targetClass = Class.forName(className); // convert string classname to class
            Object instance = targetClass.newInstance(); // invoke empty constructor

            Class<?>[] paramTypes = new Class<?>[parameterTypes.length];
            for (int i = 0; i < parameterTypes.length; i++) {
                paramTypes[i] = mapTypeNameToClass(parameterTypes[i]);
            }

            Method method = instance.getClass().getMethod(methodName, paramTypes);
            return method.invoke(instance, args);
        } catch (Exception e) {
            System.out.println(e);
        }
        return null;
    }

    private static Class<?> mapTypeNameToClass(String typeName) {
        switch (typeName) {
            case "int":
                return int.class;
            case "short":
                return short.class;
            case "long":
                return long.class;
            case "float":
                return float.class;
            case "double":
                return double.class;
            case "byte":
                return byte.class;
            case "char":
                return char.class;
            case "boolean":
                return boolean.class;
            case "String":
                return String.class;
            default:
                try {
                    return Class.forName(typeName);
                } catch (ClassNotFoundException e) {
                    System.out.println(e);
                    return null;
                }
        }
    }

    public static Object[] convertParameters(String[] parameters, String[] parameterTypes) {
        List<Object> convertedParameters = new ArrayList<>();
        try {
            for (int i = 0; i < parameters.length; i++) {
                String parameterType = parameterTypes[i];
                String parameterName = parameters[i];

                Class<?> parameterClass = mapTypeNameToClass(parameterType);

                if (parameterClass == int.class) {
                    int intValue = Integer.parseInt(parameterName);
                    convertedParameters.add(intValue);
                } else if (parameterClass == double.class) {
                    double doubleValue = Double.parseDouble(parameterName);
                    convertedParameters.add(doubleValue);
                } else {
                    Object instance = parameterClass.newInstance();
                    convertedParameters.add(instance);
                }
            }
        }  catch (Exception e) {
            System.out.println(e);
        }
        return convertedParameters.toArray();
    }

    public static void printResultForSubmisstion(
            String className, String methodName,
            String expectedOutputType, String expectedOutput,
            String[] parameterTypes, Object... args){
        Object result = callMethod(className, methodName, parameterTypes, args);

        if (convertParameters(new String[] {expectedOutput}, new String[] {expectedOutputType})[0].equals(result)) {
            System.out.println("true");
        } else {
            System.out.println("false");
        }
    }

    public static void printResultForRunning(
            String className, String methodName,
            String[] parameterTypes, Object... args){
        Object result = callMethod(className, methodName, parameterTypes, args);
        if (result != null)
            System.out.print(result);
    }

    public static void main(String[] args) throws Exception {
        String className = "JavaClass";
        String methodName = %s;
        boolean isCodeRunning = %s;

        //Teacher's testcases
        String [][] inputs = {%s};
        String [][] inputTypes = {%s};
        String[] outputs = {%s};
        String[] outputTypes = {%s};

        //Student's inputs
        String[] enteredInput = %s;
        String[] enteredInputType = %s;

        if (isCodeRunning){
            Object[] convertedParameters = convertParameters(enteredInput, enteredInputType);

            printResultForRunning(
                    className, methodName,
                    enteredInputType, Arrays.stream(convertedParameters).toArray());
        } else {
            for (int i = 0; i < inputs.length; i++){
                String[] parameterTypes = inputTypes[i];
                String[] parameters = inputs[i];
                String expectedOutput = outputs[i];
                String expectedOutputType = outputTypes[i];

                Object[] convertedParameters = convertParameters(parameters, parameterTypes);

                printResultForSubmisstion(
                        className, methodName,
                        expectedOutputType, expectedOutput,
                        parameterTypes, Arrays.stream(convertedParameters).toArray());
            }
        }
    }
}
